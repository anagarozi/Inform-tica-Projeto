# -*- coding: utf-8 -*-
"""
Created on Mon May 12 14:20:32 2025

@author: Ana Julia
"""

#first library is_sprocket1
#to count the teeth, i used the program clean image and count teeth

import cv2
from matplotlib import pyplot as plt
import numpy as np


def circunf(puntos):
    '''   Returns A,B,C of circumference x2+y2+Ax+By+C=0
    que ajusta los puntos'''

    n=len(puntos)
    A=np.ones( (n,3), np.float32)

    for i in range(n):
        A[i][0]= puntos[i][0]
        A[i][1]= puntos[i][1]

    b=np.ones( (n,1), np.float32)
    for i in range(n):
        b[i][0] = - puntos[i][0]**2 - puntos[i][1]**2 

    pseudo_inv_A= np.linalg.pinv(A)
    ABC=pseudo_inv_A@b
    return ABC.flatten()

#import image
img = cv2.imread('C:/Users/Ana Julia/.spyder-py3/Images Final/gear1.png',0)
img_color = cv2.cvtColor(img, cv2.COLOR_GRAY2BGR)
img_bin = cv2.threshold(img, 0, 255, cv2.THRESH_BINARY_INV+cv2.THRESH_OTSU)[1]

#extract external contours
contours = cv2.findContours(img_bin, cv2.RETR_LIST, cv2.CHAIN_APPROX_NONE)[0]
biggest_contour = max(contours, key=len)
img_contour = np.zeros_like(img_bin)
cv2.drawContours(img_contour, biggest_contour, -1, 255, 1)

#looking for contour points
y, x = np.where(img_contour>0)
points_contour = []
for i in range(len(x)):
    points_contour.append((x[i],y[i]))

[A,B,C]=circunf(points_contour)
radio= int (np.sqrt(A**2+B**2-4*C)/2)
centro= (int(-A/2), int(-B/2));

cv2.circle(img_color, centro, radio, (0, 0, 255), 1)

#looking for contours points
y, x = np.where(img_contour > 0)

#compute the center of the contour
center_x = sum(x)/len(y)
center_y = sum(y)/len(x)

max_distance = 0

#compute the maximum distance from the center to the contour
for i in range(len(x)):
    distance = np.sqrt((x[i]-center_x)**2 + (y[i]-center_y)**2)
    if distance > max_distance:
        max_distance = distance

cv2.circle(img_contour,(int(center_x), int(center_y)), int(max_distance-40), 0, -1)

num_labels, img_labels = cv2.connectedComponents(img_contour)

#PRINCIPAL LINE

start_point = centro
end_point = (centro[0], 0)
cv2.line(img_color, start_point, end_point, (0, 0, 255), 1)
cv2.circle(img_color, centro, 3, (0, 0, 255), -1)

#finding all contours
contours_all = cv2.findContours(img_bin, cv2.RETR_TREE, cv2.CHAIN_APPROX_NONE)[0]

#internal circle (hole) - ignoring the details

img_blur = cv2.medianBlur(img, 5)

circles = cv2.HoughCircles(img_blur, cv2.HOUGH_GRADIENT, dp=1.2, minDist=20,
                           param1=50, param2=30, minRadius=10, maxRadius=80)

if circles is not None:
    circles = np.uint16(np.around(circles))
    
    #the circle closer than image center
    h, w = img.shape
    img_center = np.array([w // 2, h // 2])
    
    min_dist = float('inf')
    best_circle = None
    
    for circle in circles[0, :]:
        center = np.array([circle[0], circle[1]])
        dist = np.linalg.norm(center - img_center)
        if dist < min_dist:
            min_dist = dist
            best_circle = circle
    
    if best_circle is not None:
        cx, cy, raio_eixo = best_circle
        cv2.circle(img_color, (cx, cy), raio_eixo, (0, 0, 255), 1) 
        
        #new circle 10 pixels bigger than the smallest one
        circle_section = raio_eixo + 10
  
        #i dont wanna to show the circle section, just using to calculate
        #the logic is trying to do a little bit bigger that the smallest circle to take the parts that are in the white area

        # create a mask just for the circle section
        mask_circle = np.zeros_like(img_bin)
        cv2.circle(mask_circle, (cx, cy), circle_section, 255, 1)

        # coordinates of the spots of the circle
        ys, xs = np.where(mask_circle == 255)

        # Count how many are in the white area
        white_region = cv2.threshold(img, 200, 255, cv2.THRESH_BINARY)[1]  # região clara
        branco_no_circulo = white_region[ys, xs]  # valores dos pixels do círculo na imagem original

        # Count how many pixels are white
        pixels_brancos = np.sum(branco_no_circulo == 255)

        #DETECTION OF THE LINE PARALLEL TO THE DIFFERENTIATED OPENING

        #ignore the biggest one, focus in the smallests
        contours_sorted = sorted(contours_all, key=cv2.contourArea, reverse=True)

for i, contour in enumerate(contours_sorted[1:], start=2):
    area = cv2.contourArea(contour)
    if area < 50:  # ignore small stuff
        continue

    #create mask for this one contour only
    mask_inner = np.zeros_like(img_bin)
    cv2.drawContours(mask_inner, [contour], -1, 255, -1)

    ys, xs = np.where(mask_inner == 255)
    if len(xs) < 20:
        continue  # very small

    pts = np.column_stack((xs, ys))

    #PCA for the main direction
    mean, eigenvectors = cv2.PCACompute(pts.astype(np.float32), mean=np.array([]))

    center = tuple(mean[0].astype(int))
    dir_vector = eigenvectors[0]
    length = 300  #large

    pt1 = (int(center[0] - dir_vector[0]*length), int(center[1] - dir_vector[1]*length))
    pt2 = (int(center[0] + dir_vector[0]*length), int(center[1] + dir_vector[1]*length))

    #drawing the line
    cv2.line(img_color, pt1, pt2, (0, 0, 255), 1)
    break #drawing just in the first one valid


#CALCULATE THE SMALLEST ANGLE BETWEEN THE STRAIGHT

#find the vectors
dir_vector1 = eigenvectors[0]  # vetor diretor da linha amarela (contorno interno)
dir_vector2 = np.array([end_point[0] - start_point[0], end_point[1] - start_point[1]])  # vetor diretor da linha principal (red)

#normalize the vectors
norm1 = np.linalg.norm(dir_vector1)
norm2 = np.linalg.norm(dir_vector2)

dir_vector1_normalized = dir_vector1 / norm1
dir_vector2_normalized = dir_vector2 / norm2

#calculate the dot product
dot_product = np.dot(dir_vector1_normalized, dir_vector2_normalized)

#calculate the angle in radius
angle_radians = np.arccos(dot_product)

#converting the angle for degrees
angle_degrees = np.degrees(angle_radians)

#ensure that the angles be smaller than 90 degrees
if angle_degrees > 90:
    angle_degrees = 180 - angle_degrees
    
#show the results
plt.imshow(cv2.cvtColor(img_color, cv2.COLOR_BGR2RGB))
plt.axis('off')
plt.show()

print("Radius:", raio_eixo, "pixels")
print("Number of teeth: ", num_labels-1)
print(f"Angle: {angle_degrees:.2f}°")
print("Width of the keyway W:", pixels_brancos, "pixels")
